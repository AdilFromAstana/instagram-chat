import { configureStore, createSlice } from "@reduxjs/toolkit";

// üìå UI –°–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞, —á–∞—Ç)
const uiSlice = createSlice({
    name: "ui",
    initialState: {
        selectedChatId: null,
        selectedFolder: "inbox",
    },
    reducers: {
        setSelectedChat: (state, action) => {
            state.selectedChatId = action.payload;
        },
        setSelectedFolder: (state, action) => {
            state.selectedFolder = action.payload;
        },
    },
});

const clientsSlice = createSlice({
    name: "clients",
    initialState: {},
    reducers: {
        setClients: (state, action) => {
            const { folder, clients } = action.payload;
            if (!state[folder]) {
                state[folder] = clients;
            } else {
                state[folder] = [...state[folder], ...clients];
            }
        },
        addClient: (state, action) => {
            const { folder, client } = action.payload;
            if (state[folder]) {
                state[folder] = [...state[folder], client];
            } else {
                state[folder] = [client];
            }
        },
    },
});

// üìå –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
const messagesSlice = createSlice({
    name: "messages",
    initialState: [],
    reducers: {
        addLocalMessage: (state, action) => {
            state.push(action.payload);
        },
        removeLocalMessage: (state, action) => {
            return state.filter((msg) => msg.id !== action.payload);
        },
    },
});

// üìå –ì–ª–æ–±–∞–ª—å–Ω—ã–π Store
export const store = configureStore({
    reducer: {
        ui: uiSlice.reducer,
        messages: messagesSlice.reducer,
        clients: clientsSlice.reducer,
    },
});

// üìå –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—à–µ–Ω—ã
export const { setClients, updateClient, addClient } = clientsSlice.actions;
export const { setSelectedChat, setSelectedFolder } = uiSlice.actions;
export const { addLocalMessage, removeLocalMessage } = messagesSlice.actions;
